// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.25.0
// source: books.sql

package sqlc

import (
	"context"
)

const createBook = `-- name: CreateBook :exec
INSERT INTO books (title, author_id) VALUES (?, ?)
`

type CreateBookParams struct {
	Title    string
	AuthorID int64
}

func (q *Queries) CreateBook(ctx context.Context, arg CreateBookParams) error {
	_, err := q.db.ExecContext(ctx, createBook, arg.Title, arg.AuthorID)
	return err
}

const deleteBook = `-- name: DeleteBook :exec
DELETE FROM books WHERE id = ?
`

func (q *Queries) DeleteBook(ctx context.Context, id int64) error {
	_, err := q.db.ExecContext(ctx, deleteBook, id)
	return err
}

const getBookByID = `-- name: GetBookByID :one
SELECT id, title, author_id, created_at, updated_at FROM books WHERE id = ? ORDER BY id LIMIT 1
`

func (q *Queries) GetBookByID(ctx context.Context, id int64) (Book, error) {
	row := q.db.QueryRowContext(ctx, getBookByID, id)
	var i Book
	err := row.Scan(
		&i.ID,
		&i.Title,
		&i.AuthorID,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getBooks = `-- name: GetBooks :many
SELECT id, title, author_id, created_at, updated_at FROM books
`

func (q *Queries) GetBooks(ctx context.Context) ([]Book, error) {
	rows, err := q.db.QueryContext(ctx, getBooks)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Book
	for rows.Next() {
		var i Book
		if err := rows.Scan(
			&i.ID,
			&i.Title,
			&i.AuthorID,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateBook = `-- name: UpdateBook :exec
UPDATE books SET title = ?, author_id = ? WHERE id = ?
`

type UpdateBookParams struct {
	Title    string
	AuthorID int64
	ID       int64
}

func (q *Queries) UpdateBook(ctx context.Context, arg UpdateBookParams) error {
	_, err := q.db.ExecContext(ctx, updateBook, arg.Title, arg.AuthorID, arg.ID)
	return err
}
